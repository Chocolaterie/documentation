"use strict";(self.webpackChunkschool_learn=self.webpackChunkschool_learn||[]).push([[2308],{8112:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>l,contentTitle:()=>a,default:()=>p,frontMatter:()=>o,metadata:()=>t,toc:()=>c});var r=s(7624),i=s(2172);const o={sidebar_position:2},a="Cours Java - Polymorphisme en Programmation Orient\xe9e Objet (POO)",t={id:"java/course/m01-poo-polymorphisme",title:"Cours Java - Polymorphisme en Programmation Orient\xe9e Objet (POO)",description:"Introduction",source:"@site/docs/java/course/m01-poo-polymorphisme.md",sourceDirName:"java/course",slug:"/java/course/m01-poo-polymorphisme",permalink:"/documentation/docs/java/course/m01-poo-polymorphisme",draft:!1,unlisted:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/java/course/m01-poo-polymorphisme.md",tags:[],version:"current",sidebarPosition:2,frontMatter:{sidebar_position:2},sidebar:"tutorialSidebar",previous:{title:"Cours Java - H\xe9ritage en Programmation Orient\xe9e Objet (POO)",permalink:"/documentation/docs/java/course/m01-poo-heritage"},next:{title:"Cours Java - Visibilit\xe9 des Variables et M\xe9thodes en POO",permalink:"/documentation/docs/java/course/m01-poo-visiblity"}},l={},c=[{value:"Introduction",id:"introduction",level:2},{value:"Types de Polymorphisme en Java",id:"types-de-polymorphisme-en-java",level:2},{value:"Exemple : Jeu Vid\xe9o - Polymorphisme avec Personnages",id:"exemple--jeu-vid\xe9o---polymorphisme-avec-personnages",level:2},{value:"1. Cr\xe9ation de la Classe Parente <code>Character</code>",id:"1-cr\xe9ation-de-la-classe-parente-character",level:3},{value:"2. Cr\xe9ation de Sous-Classes Sp\xe9cialis\xe9es",id:"2-cr\xe9ation-de-sous-classes-sp\xe9cialis\xe9es",level:3},{value:"<code>Warrior</code> (Guerrier)",id:"warrior-guerrier",level:4},{value:"<code>Mage</code> (Magicien)",id:"mage-magicien",level:4},{value:"3. Utilisation du Polymorphisme",id:"3-utilisation-du-polymorphisme",level:3},{value:"Concepts Importants",id:"concepts-importants",level:2},{value:"R\xe9sum\xe9",id:"r\xe9sum\xe9",level:2}];function d(e){const n={code:"code",h1:"h1",h2:"h2",h3:"h3",h4:"h4",hr:"hr",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",...(0,i.M)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.h1,{id:"cours-java---polymorphisme-en-programmation-orient\xe9e-objet-poo",children:"Cours Java - Polymorphisme en Programmation Orient\xe9e Objet (POO)"}),"\n",(0,r.jsx)(n.h2,{id:"introduction",children:"Introduction"}),"\n",(0,r.jsxs)(n.p,{children:["Le ",(0,r.jsx)(n.strong,{children:"polymorphisme"})," en POO permet de manipuler des objets de types diff\xe9rents \xe0 travers une m\xeame interface ou classe parente. Cela rend le code plus flexible et extensible."]}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h2,{id:"types-de-polymorphisme-en-java",children:"Types de Polymorphisme en Java"}),"\n",(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Polymorphisme de Compilation (Surcharge)"})," : M\xeame m\xe9thode avec des param\xe8tres diff\xe9rents."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Polymorphisme d'Ex\xe9cution (Red\xe9finition)"})," : M\xe9thodes red\xe9finies dans des sous-classes."]}),"\n"]}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h2,{id:"exemple--jeu-vid\xe9o---polymorphisme-avec-personnages",children:"Exemple : Jeu Vid\xe9o - Polymorphisme avec Personnages"}),"\n",(0,r.jsxs)(n.h3,{id:"1-cr\xe9ation-de-la-classe-parente-character",children:["1. Cr\xe9ation de la Classe Parente ",(0,r.jsx)(n.code,{children:"Character"})]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-java",children:'// Classe parente repr\xe9sentant un personnage g\xe9n\xe9ral\npublic class Character {\n    protected String name;\n\n    public Character(String name) {\n        this.name = name;\n    }\n\n    // M\xe9thode g\xe9n\xe9rique\n    public void performAction() {\n        System.out.println(name + " attend...");\n    }\n}\n'})}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h3,{id:"2-cr\xe9ation-de-sous-classes-sp\xe9cialis\xe9es",children:"2. Cr\xe9ation de Sous-Classes Sp\xe9cialis\xe9es"}),"\n",(0,r.jsxs)(n.h4,{id:"warrior-guerrier",children:[(0,r.jsx)(n.code,{children:"Warrior"})," (Guerrier)"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-java",children:'public class Warrior extends Character {\n    public Warrior(String name) {\n        super(name);\n    }\n\n    @Override\n    public void performAction() {\n        System.out.println(name + " attaque avec son \xe9p\xe9e !");\n    }\n}\n'})}),"\n",(0,r.jsxs)(n.h4,{id:"mage-magicien",children:[(0,r.jsx)(n.code,{children:"Mage"})," (Magicien)"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-java",children:'public class Mage extends Character {\n    public Mage(String name) {\n        super(name);\n    }\n\n    @Override\n    public void performAction() {\n        System.out.println(name + " lance un sort magique !");\n    }\n}\n'})}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h3,{id:"3-utilisation-du-polymorphisme",children:"3. Utilisation du Polymorphisme"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-java",children:'public class Game {\n    public static void main(String[] args) {\n        // Cr\xe9ation d\'un tableau de personnages\n        Character[] characters = {\n            new Warrior("Arthas"),\n            new Mage("Jaina"),\n            new Character("Paysan")\n        };\n\n        System.out.println("--- D\xe9but des Actions ---");\n\n        // Utilisation du polymorphisme\n        for (Character character : characters) {\n            character.performAction();\n        }\n    }\n}\n'})}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h2,{id:"concepts-importants",children:"Concepts Importants"}),"\n",(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsxs)(n.strong,{children:["Red\xe9finition des M\xe9thodes (",(0,r.jsx)(n.code,{children:"@Override"}),")"]})," : Les sous-classes peuvent red\xe9finir les m\xe9thodes h\xe9rit\xe9es."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Classe Abstraite et Interface"})," : Le polymorphisme fonctionne aussi avec des classes abstraites et des interfaces."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Tableaux ou Listes de Type Parent"})," : Utilisez un tableau de type parent pour g\xe9rer des objets de types diff\xe9rents."]}),"\n"]}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h2,{id:"r\xe9sum\xe9",children:"R\xe9sum\xe9"}),"\n",(0,r.jsxs)(n.p,{children:["Le polymorphisme rend le code ",(0,r.jsx)(n.strong,{children:"flexible"}),", ",(0,r.jsx)(n.strong,{children:"extensible"})," et ",(0,r.jsx)(n.strong,{children:"r\xe9utilisable"}),". Utilisez-le pour concevoir des syst\xe8mes complexes o\xf9 plusieurs types d'objets peuvent \xeatre trait\xe9s uniform\xe9ment."]})]})}function p(e={}){const{wrapper:n}={...(0,i.M)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(d,{...e})}):d(e)}},2172:(e,n,s)=>{s.d(n,{I:()=>t,M:()=>a});var r=s(1504);const i={},o=r.createContext(i);function a(e){const n=r.useContext(o);return r.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function t(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:a(e.components),r.createElement(o.Provider,{value:n},e.children)}}}]);