"use strict";(self.webpackChunkschool_learn=self.webpackChunkschool_learn||[]).push([[2140],{2220:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>d,contentTitle:()=>a,default:()=>u,frontMatter:()=>r,metadata:()=>s,toc:()=>l});var o=t(7624),i=t(2172);const r={sidebar_position:7},a="Data Binding (MVVM)",s={id:"android/course/compose/m08-data-binding",title:"Data Binding (MVVM)",description:"ViewModel",source:"@site/docs/android/course/compose/m08-data-binding.md",sourceDirName:"android/course/compose",slug:"/android/course/compose/m08-data-binding",permalink:"/documentation/docs/android/course/compose/m08-data-binding",draft:!1,unlisted:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/android/course/compose/m08-data-binding.md",tags:[],version:"current",sidebarPosition:7,frontMatter:{sidebar_position:7},sidebar:"tutorialSidebar",previous:{title:"Version Compose",permalink:"/documentation/docs/category/version-compose"},next:{title:"ListView et RecyclerView",permalink:"/documentation/docs/android/course/compose/m08-listview"}},d={},l=[{value:"ViewModel",id:"viewmodel",level:2},{value:"Exemple d&#39;un ViewModel",id:"exemple-dun-viewmodel",level:3},{value:"Dans compose",id:"dans-compose",level:2},{value:"Dans une Activity",id:"dans-une-activity",level:2}];function c(e){const n={code:"code",h1:"h1",h2:"h2",h3:"h3",p:"p",pre:"pre",...(0,i.M)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(n.h1,{id:"data-binding-mvvm",children:"Data Binding (MVVM)"}),"\n",(0,o.jsx)(n.h2,{id:"viewmodel",children:"ViewModel"}),"\n",(0,o.jsx)(n.p,{children:"Le ViewModel est une classe utilis\xe9e pour contenir et g\xe9rer la logique d'un \xe9cran dans une application Android. Il ne contient aucun rendu visuel, uniquement des calculs et des donn\xe9es n\xe9cessaires \xe0 l'affichage, s\xe9parant ainsi la logique de l'interface utilisateur."}),"\n",(0,o.jsx)(n.h3,{id:"exemple-dun-viewmodel",children:"Exemple d'un ViewModel"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-kotlin",children:"class CounterViewModel : ViewModel() {\n\n    val counter = MutableLiveData<Int>(0)\n}\n"})}),"\n",(0,o.jsx)(n.h2,{id:"dans-compose",children:"Dans compose"}),"\n",(0,o.jsxs)(n.p,{children:["Dans Compose, il est recommand\xe9 d'utiliser les ",(0,o.jsx)(n.code,{children:"MutableState"})," pour le binding de valeur."]}),"\n",(0,o.jsxs)(n.p,{children:["On peut convertir notre ",(0,o.jsx)(n.code,{children:"MutableLiveData"})," en ",(0,o.jsx)(n.code,{children:"MutableState"})," gr\xe2ce \xe0 ",(0,o.jsx)(n.code,{children:"observeAsState"}),"."]}),"\n",(0,o.jsx)(n.p,{children:"Exemple :"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-kotlin",children:"// val counter est la version MutableState de counterViewModel.counter\nval counter by counterViewModel.counter.observeAsState(0)\n"})}),"\n",(0,o.jsx)(n.p,{children:"Donc, le composant entier qui afficherait le compteur dans un texte et un champ de saisie pour modifier le compteur pourrait ressembler \xe0 ceci :"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-kotlin",children:'@Composable\nfun CounterScreen(counterViewModel: CounterViewModel) {\n    val counter by counterViewModel.counter.observeAsState(0)\n\n    Column(modifier = Modifier.padding(16.dp)) {\n        Text(text = "Counter: $counter", style = MaterialTheme.typography.titleSmall)\n\n        var text by remember { mutableStateOf(counter.toString()) }\n\n        OutlinedTextField(\n            value = text,\n            onValueChange = { newValue ->\n                text = newValue\n                newValue.toIntOrNull()?.let { counterViewModel.counter.value = it }\n            },\n            label = { Text("Counter") }\n        )\n    }\n}\n\n'})}),"\n",(0,o.jsx)(n.h2,{id:"dans-une-activity",children:"Dans une Activity"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-kotlin",children:"class CounterActivity : ComponentActivity() {\n\n    // D\xe9clarer le view model\n    lateinit var counterViewModel: CounterViewModel;\n\n    override fun onCreate(savedInstanceState: Bundle?) {\n        super.onCreate(savedInstanceState)\n\n        // Instancier le view model\n        counterViewModel = CounterViewModel()\n\n        enableEdgeToEdge()\n        setContent {\n            DemoComposeAndroidTheme {\n                CounterScreen(counterViewModel)\n            }\n        }\n    }\n}\n"})})]})}function u(e={}){const{wrapper:n}={...(0,i.M)(),...e.components};return n?(0,o.jsx)(n,{...e,children:(0,o.jsx)(c,{...e})}):c(e)}},2172:(e,n,t)=>{t.d(n,{I:()=>s,M:()=>a});var o=t(1504);const i={},r=o.createContext(i);function a(e){const n=o.useContext(r);return o.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function s(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:a(e.components),o.createElement(r.Provider,{value:n},e.children)}}}]);