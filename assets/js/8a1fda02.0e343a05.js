"use strict";(self.webpackChunkschool_learn=self.webpackChunkschool_learn||[]).push([[7152],{7964:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>c,contentTitle:()=>a,default:()=>u,frontMatter:()=>r,metadata:()=>i,toc:()=>l});var o=s(7624),t=s(2172);const r={sidebar_position:1},a="TP - Pattern Observable",i={id:"poo/observable/tp",title:"TP - Pattern Observable",description:"Cr\xe9er une classe Observable g\xe9n\xe9rique, car on souhaite que les valeurs \xe0 notifier puissent \xeatre tout et n'importe quoi, et ne pas se limiter seulement \xe0 des String, par exemple.",source:"@site/docs/poo/observable/tp.md",sourceDirName:"poo/observable",slug:"/poo/observable/tp",permalink:"/documentation/docs/poo/observable/tp",draft:!1,unlisted:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/poo/observable/tp.md",tags:[],version:"current",sidebarPosition:1,frontMatter:{sidebar_position:1},sidebar:"tutorialSidebar",previous:{title:"Observable",permalink:"/documentation/docs/category/observable"},next:{title:"TP - Pattern Observable (Correction)",permalink:"/documentation/docs/poo/observable/tp-correction"}},c={},l=[{value:"Proposition",id:"proposition",level:2},{value:"Rappel : Fonction Lambda",id:"rappel--fonction-lambda",level:2}];function d(e){const n={code:"code",h1:"h1",h2:"h2",img:"img",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,t.M)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(n.h1,{id:"tp---pattern-observable",children:"TP - Pattern Observable"}),"\n",(0,o.jsxs)(n.p,{children:["Cr\xe9er une classe ",(0,o.jsx)(n.strong,{children:"Observable"})," g\xe9n\xe9rique, car on souhaite que les valeurs \xe0 notifier puissent \xeatre tout et n'importe quoi, et ne pas se limiter seulement \xe0 des ",(0,o.jsx)(n.strong,{children:"String"}),", par exemple."]}),"\n",(0,o.jsxs)(n.p,{children:["Cette classe va contenir une liste de ",(0,o.jsx)(n.strong,{children:"Observer"}),"."]}),"\n",(0,o.jsxs)(n.p,{children:["Un ",(0,o.jsx)(n.strong,{children:"Observer"})," peut \xeatre plein de choses : une classe, une interface, une fonction, etc."]}),"\n",(0,o.jsx)(n.p,{children:"Le but est que :"}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsxs)(n.li,{children:["On peut ajouter ou supprimer des ",(0,o.jsx)(n.strong,{children:"Observer"})," dans un ",(0,o.jsx)(n.strong,{children:"Observable"})]}),"\n",(0,o.jsxs)(n.li,{children:["Lorsqu'on change la valeur dans un ",(0,o.jsx)(n.strong,{children:"Observable"}),", cela va ",(0,o.jsx)(n.strong,{children:"notifier"})," tous les ",(0,o.jsx)(n.strong,{children:"Observers"})," que la valeur a chang\xe9."]}),"\n"]}),"\n",(0,o.jsx)(n.p,{children:(0,o.jsx)(n.img,{alt:"Screenshot",src:s(4640).c+"",width:"381",height:"231"})}),"\n",(0,o.jsx)(n.h2,{id:"proposition",children:"Proposition"}),"\n",(0,o.jsxs)(n.p,{children:["Dans la correction, je ferais des ",(0,o.jsx)(n.strong,{children:"Observer"})," en tant que fonctions lambda."]}),"\n",(0,o.jsxs)(n.p,{children:["Donc, si vous n'avez pas d'id\xe9e sur la d\xe9finition de votre ",(0,o.jsx)(n.strong,{children:"Observer"}),", je vous propose de dire que vos ",(0,o.jsx)(n.strong,{children:"Observer"})," seront des fonctions lambda."]}),"\n",(0,o.jsx)(n.h2,{id:"rappel--fonction-lambda",children:"Rappel : Fonction Lambda"}),"\n",(0,o.jsxs)(n.p,{children:["Sur Dart, une fonction lambda c'est ce typage : ",(0,o.jsx)(n.code,{children:"void Function()"})]}),"\n",(0,o.jsx)(n.p,{children:"Exemple de fonction lambda utilisable comme n'importe quelle variable/param\xe8tre :"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-dart",children:'\n// D\xe9finir une fonction lambda\nvoid Function() maFonctionLambda = () {\nprint("Coucou je suis appel\xe9");\n};\n\n// Appeler ma fonction lambda\nmaFonctionLambda();\n\n'})}),"\n",(0,o.jsx)(n.p,{children:"On peut aussi dire que notre typage de fonction lambda attend un ou des param\xe8tres :"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-dart",children:'\n// D\xe9finir une fonction lambda avec des param\xe8tres\nvoid Function(String unParam) maFonctionLambda = (unParam) {\nprint("Coucou je suis appel\xe9 et voici unParam : ${unParam}");\n};\n\n// Appeler ma fonction lambda avec des param\xe8tres\nmaFonctionLambda("Chocolatine");\n\n'})}),"\n",(0,o.jsx)(n.p,{children:"On peut faire \xe9norm\xe9ment de choses en POO avec \xe7a. Par exemple, je peux m\xeame cr\xe9er une liste de fonctions dans une variable et les appeler :"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-dart",children:'void Function() maFonctionLambda1 = () {\nprint("Coucou 1");\n};\n\nvoid Function() maFonctionLambda2 = () {\nprint("Coucou Fonction 2");\n};\n\nList<void Function()> mesFonctions = [\nmaFonctionLambda1,\nmaFonctionLambda2\n];\n\nfor (var maFonction in mesFonctions){\nmaFonction();\n }\n'})}),"\n",(0,o.jsx)(n.p,{children:"On pourrait aller plus loin et ajouter des param\xe8tres g\xe9n\xe9riques. Bref, la POO est vaste et permet de faire beaucoup de choses."}),"\n",(0,o.jsx)(n.p,{children:"Il faut surtout comprendre que la majorit\xe9 des \xe9l\xe9ments sont des classes, de l'h\xe9ritage, du typage, des signatures, etc. Une fois que l'on conna\xeet ces concepts, peu importe les types ou signatures, m\xeame farfelus, il suffit de les appliquer comme tout autre type ou signature."})]})}function u(e={}){const{wrapper:n}={...(0,t.M)(),...e.components};return n?(0,o.jsx)(n,{...e,children:(0,o.jsx)(d,{...e})}):d(e)}},4640:(e,n,s)=>{s.d(n,{c:()=>o});const o=s.p+"assets/images/diagram_obs-5770e8a9fae6c9526d0367f6392f7939.png"},2172:(e,n,s)=>{s.d(n,{I:()=>i,M:()=>a});var o=s(1504);const t={},r=o.createContext(t);function a(e){const n=o.useContext(r);return o.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function i(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:a(e.components),o.createElement(r.Provider,{value:n},e.children)}}}]);