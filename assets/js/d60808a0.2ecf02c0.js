"use strict";(self.webpackChunkschool_learn=self.webpackChunkschool_learn||[]).push([[7240],{9596:(e,n,o)=>{o.r(n),o.d(n,{assets:()=>a,contentTitle:()=>i,default:()=>u,frontMatter:()=>r,metadata:()=>l,toc:()=>c});var s=o(7624),t=o(2172);const r={sidebar_position:2},i="Logger (winston)",l={id:"nodejs/course/logger",title:"Logger (winston)",description:"Pour ajouter un systeme log plus avanc\xe9 que console.log nous pouvons utiliser winston.",source:"@site/docs/nodejs/course/logger.md",sourceDirName:"nodejs/course",slug:"/nodejs/course/logger",permalink:"/documentation/docs/nodejs/course/logger",draft:!1,unlisted:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/nodejs/course/logger.md",tags:[],version:"current",sidebarPosition:2,frontMatter:{sidebar_position:2},sidebar:"tutorialSidebar",previous:{title:"Test Unitaire/Fonctionnel (Jest)",permalink:"/documentation/docs/nodejs/course/test-fonc-jest"},next:{title:"TP",permalink:"/documentation/docs/category/tp-1"}},a={},c=[{value:"Configuration",id:"configuration",level:2},{value:"Utilisation",id:"utilisation",level:2}];function d(e){const n={code:"code",h1:"h1",h2:"h2",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,t.M)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.h1,{id:"logger-winston",children:"Logger (winston)"}),"\n",(0,s.jsx)(n.p,{children:"Pour ajouter un systeme log plus avanc\xe9 que console.log nous pouvons utiliser winston."}),"\n",(0,s.jsx)(n.h2,{id:"configuration",children:"Configuration"}),"\n",(0,s.jsx)(n.p,{children:"Exemple de configuration du logger"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-js",children:'// -- configuer le logger\nconst logger = winston.createLogger({\n    // Log only if level is less than (meaning more severe) or equal to this\n    level: "info",\n    // Use timestamp and printf to create a standard log format\n    format: winston.format.combine(\n      winston.format.timestamp(),\n      winston.format.printf(\n        (info) => `${info.timestamp} ${info.level}: ${info.message}`\n      )\n    ),\n    // Log to the console and a file\n    transports: [\n      new winston.transports.Console(),\n      new winston.transports.File({ filename: "logs/app.log" }),\n    ],\n  });\n\n'})}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"format"})," : Permet de d\xe9finir comment le message sera ",(0,s.jsx)(n.strong,{children:"format\xe9"})," lorsqu'on le loguera."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"transports"})," : Permet de d\xe9finir comment le message sera ",(0,s.jsx)(n.strong,{children:"trait\xe9"}),". En gros, que faire lorsqu'on appelle ",(0,s.jsx)(n.code,{children:"log"}),". Dans notre cas, nous d\xe9cidons de l'afficher dans la console et de l'ajouter dans le fichier \"logs/app.log\", d'o\xf9 deux transports."]}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"utilisation",children:"Utilisation"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-js",children:"logger.info(`Mon message logg\xe9`);\n"})})]})}function u(e={}){const{wrapper:n}={...(0,t.M)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(d,{...e})}):d(e)}},2172:(e,n,o)=>{o.d(n,{I:()=>l,M:()=>i});var s=o(1504);const t={},r=s.createContext(t);function i(e){const n=s.useContext(r);return s.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function l(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:i(e.components),s.createElement(r.Provider,{value:n},e.children)}}}]);