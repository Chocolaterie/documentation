"use strict";(self.webpackChunkschool_learn=self.webpackChunkschool_learn||[]).push([[8320],{320:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>o,contentTitle:()=>d,default:()=>u,frontMatter:()=>t,metadata:()=>r,toc:()=>s});var l=i(7624),a=i(2172);const t={sidebar_position:7},d="Data Binding (MVVM)",r={id:"android/course/xml/m08-data-binding",title:"Data Binding (MVVM)",description:"MVVM signifie Model-View-ViewModel. C'est un mod\xe8le d'architecture logicielle qui s\xe9pare l'interface utilisateur de la logique d'application pour rendre le code plus organis\xe9 et maintenable.",source:"@site/docs/android/course/xml/m08-data-binding.md",sourceDirName:"android/course/xml",slug:"/android/course/xml/m08-data-binding",permalink:"/documentation/docs/android/course/xml/m08-data-binding",draft:!1,unlisted:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/android/course/xml/m08-data-binding.md",tags:[],version:"current",sidebarPosition:7,frontMatter:{sidebar_position:7},sidebar:"tutorialSidebar",previous:{title:"Kotlin",permalink:"/documentation/docs/android/course/xml/m03-kotlin"},next:{title:"ListView et RecyclerView",permalink:"/documentation/docs/android/course/xml/m08-listview"}},o={},s=[{value:"Installation",id:"installation",level:2},{value:"ViewModel",id:"viewmodel",level:2},{value:"Exemple d&#39;un ViewModel",id:"exemple-dun-viewmodel",level:3},{value:"Dans le XML",id:"dans-le-xml",level:2},{value:"Pour ajouter un ViewModel dans le XML",id:"pour-ajouter-un-viewmodel-dans-le-xml",level:3},{value:"Dans une Activity",id:"dans-une-activity",level:2},{value:"Exploiter la ViewModel",id:"exploiter-la-viewmodel",level:2}];function c(e){const n={code:"code",h1:"h1",h2:"h2",h3:"h3",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,a.M)(),...e.components};return(0,l.jsxs)(l.Fragment,{children:[(0,l.jsx)(n.h1,{id:"data-binding-mvvm",children:"Data Binding (MVVM)"}),"\n",(0,l.jsx)(n.p,{children:"MVVM signifie Model-View-ViewModel. C'est un mod\xe8le d'architecture logicielle qui s\xe9pare l'interface utilisateur de la logique d'application pour rendre le code plus organis\xe9 et maintenable."}),"\n",(0,l.jsx)(n.h2,{id:"installation",children:"Installation"}),"\n",(0,l.jsxs)(n.p,{children:["Il faut ",(0,l.jsx)(n.strong,{children:"activer"})," le ",(0,l.jsx)(n.strong,{children:"DataBinding"})," dans gradle !"]}),"\n",(0,l.jsx)(n.p,{children:"Dans le build.gradle :"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{children:"buildFeatures {\n    dataBinding = true\n}\n"})}),"\n",(0,l.jsx)(n.h2,{id:"viewmodel",children:"ViewModel"}),"\n",(0,l.jsx)(n.p,{children:"Le ViewModel est une classe utilis\xe9e pour contenir et g\xe9rer la logique d'un \xe9cran dans une application Android. Il ne contient aucun rendu visuel, uniquement des calculs et des donn\xe9es n\xe9cessaires \xe0 l'affichage, s\xe9parant ainsi la logique de l'interface utilisateur."}),"\n",(0,l.jsx)(n.h3,{id:"exemple-dun-viewmodel",children:"Exemple d'un ViewModel"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-kotlin",children:"class CounterViewModel : ViewModel() {\n\n    val counter = MutableLiveData<Int>()\n\n    init {\n        counter.value = 0\n    }\n\n    fun plusUn() {\n        counter.value = (counter.value)?.plus(1)\n    }\n}\n"})}),"\n",(0,l.jsx)(n.p,{children:"On remarque :"}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.strong,{children:"Un h\xe9ritage"})," : Pour un fonctionnement propre \xe0 Android"]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.strong,{children:"MutableLiveData"})," : Qui sert \xe0 utiliser le pattern Observable pour notifier des changements"]}),"\n"]}),"\n",(0,l.jsx)(n.h2,{id:"dans-le-xml",children:"Dans le XML"}),"\n",(0,l.jsxs)(n.p,{children:["La page XML doit commencer par la balise ",(0,l.jsx)(n.code,{children:"<layout>"}),". C'est une obligation pour indiquer que cette page pourra utiliser le ",(0,l.jsx)(n.strong,{children:"DataBinding"})]}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-xml",children:'<layout xmlns:android="http://schemas.android.com/apk/res/android">\n'})}),"\n",(0,l.jsx)(n.h3,{id:"pour-ajouter-un-viewmodel-dans-le-xml",children:"Pour ajouter un ViewModel dans le XML"}),"\n",(0,l.jsxs)(n.p,{children:["Ensuite, si vous souhaitez ajouter des ViewModel dans la page (donc apr\xe8s la balise ",(0,l.jsx)(n.code,{children:"<layout>"}),"), vous pouvez utiliser la balise ",(0,l.jsx)(n.code,{children:"<variable>"})," pour chaque ViewModel. Attention, les balises ",(0,l.jsx)(n.code,{children:"<variable>"})," doivent \xeatre contenues dans la balise ",(0,l.jsx)(n.code,{children:"<data>"})," (qui elle-m\xeame est dans ",(0,l.jsx)(n.code,{children:"<layout>"}),"). Par exemple :"]}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-xml",children:'<data>\n    <variable\n        name="monViewModel"\n        type="com.xxx.CounterViewModel" />\n</data>\n'})}),"\n",(0,l.jsx)(n.p,{children:"Donc \xe0 la fin, le d\xe9but de votre page xml peurrais ressembler \xe0 ca :"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-xml",children:'<layout xmlns:android="http://schemas.android.com/apk/res/android">\n\n    <data>\n        <variable\n            name="monViewModel"\n            type="com.xxx.CounterViewModel" />\n    </data>\n\n     \x3c!-- Vos composants / designs --\x3e\n     ...\n</layout>\n'})}),"\n",(0,l.jsx)(n.h2,{id:"dans-une-activity",children:"Dans une Activity"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-kotlin",children:"class MonActivity : ComponentActivity() {\n\n    lateinit var viewBinding : ActivityMainBinding;\n\n    override fun onCreate(savedInstanceState: Bundle?) {\n        super.onCreate(savedInstanceState)\n\n        // Charger la vue en mode DataBinding\n        viewBinding = DataBindingUtil.setContentView(this, R.layout.activity_main);\n\n        // Sp\xe9cifier view model par d\xe9faut (vide) \xe0 la vue\n        var counterViewModel = CounterViewModel(this);\n        viewBinding.monViewModel = counterViewModel;\n    }\n}\n"})}),"\n",(0,l.jsx)(n.p,{children:"On remarque :"}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.strong,{children:"SetContentView"})," se vois remplacer par ",(0,l.jsx)(n.strong,{children:"DataBindingUtil.setContentView"})," pour exploiter le DataBinding sur les vues"]}),"\n",(0,l.jsxs)(n.li,{children:["Je d\xe9cide ici d'instancier moi m\xeame un ",(0,l.jsx)(n.strong,{children:"ViewModel"})," pour le rattacher dans la vue"]}),"\n"]}),"\n",(0,l.jsx)(n.h2,{id:"exploiter-la-viewmodel",children:"Exploiter la ViewModel"}),"\n",(0,l.jsx)(n.p,{children:"Maintenant que le ViewModel est connect\xe9 \xe0 la page, vous pourrais l'exploiter comme ceci par exemple :"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-xml",children:'    ...\n     \x3c!-- One-Way Binding --\x3e\n    <TextView\n        android:layout_width="match_parent"\n        android:layout_height="wrap_content"\n        android:text="@{monViewModel.counter}"\n    />\n\n     \x3c!-- Two-Way Binding --\x3e\n    <EditText\n        android:layout_width="match_parent"\n        android:layout_height="wrap_content"\n        android:text="@={monViewModel.counter}"\n    />\n     ...\n</layout>\n'})}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsxs)(n.li,{children:["\n",(0,l.jsxs)(n.p,{children:[(0,l.jsx)(n.strong,{children:"One-Way Binding"})," : Liaison unidirectionnelle. Le XML peut lire la valeur d'une propri\xe9t\xe9 d\xe9finie dans le ViewModel ou un autre objet de donn\xe9es, mais il ne peut pas la modifier"]}),"\n"]}),"\n",(0,l.jsxs)(n.li,{children:["\n",(0,l.jsxs)(n.p,{children:[(0,l.jsx)(n.strong,{children:"Two-Way Binding"})," : Liaison bidirectionnelle. Le XML peut lire et modifier la valeur d'une propri\xe9t\xe9. Les modifications apport\xe9es \xe0 l'interface utilisateur sont automatiquement refl\xe9t\xe9es dans le ViewModel, et vice versa"]}),"\n"]}),"\n"]})]})}function u(e={}){const{wrapper:n}={...(0,a.M)(),...e.components};return n?(0,l.jsx)(n,{...e,children:(0,l.jsx)(c,{...e})}):c(e)}},2172:(e,n,i)=>{i.d(n,{I:()=>r,M:()=>d});var l=i(1504);const a={},t=l.createContext(a);function d(e){const n=l.useContext(t);return l.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function r(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:d(e.components),l.createElement(t.Provider,{value:n},e.children)}}}]);